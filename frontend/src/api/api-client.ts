//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export interface IApiClient {

    /**
     * @return OK
     */
    almacenGET(): Promise<void>;

    /**
     * @param body (optional) 
     * @return OK
     */
    almacenPOST(body: Almacen | undefined): Promise<void>;

    /**
     * @return OK
     */
    almacenGET2(id: number): Promise<void>;

    /**
     * @param body (optional) 
     * @return OK
     */
    almacenPUT(id: number, body: Almacen | undefined): Promise<void>;

    /**
     * @return OK
     */
    almacenDELETE(id: number): Promise<void>;

    /**
     * @return OK
     */
    predeterminar(id: number): Promise<void>;

    /**
     * @param body (optional) 
     * @return OK
     */
    register(body: RegisterRequest | undefined): Promise<void>;

    /**
     * @param body (optional) 
     * @return OK
     */
    login(body: LoginRequest | undefined): Promise<void>;

    /**
     * @return OK
     */
    clienteGET(): Promise<void>;

    /**
     * @param body (optional) 
     * @return OK
     */
    clientePOST(body: Cliente | undefined): Promise<void>;

    /**
     * @return OK
     */
    clienteGET2(id: number): Promise<void>;

    /**
     * @param body (optional) 
     * @return OK
     */
    clientePUT(id: number, body: Cliente | undefined): Promise<void>;

    /**
     * @return OK
     */
    clienteDELETE(id: number): Promise<void>;

    /**
     * @return OK
     */
    detalleFacturaGET(): Promise<void>;

    /**
     * @param body (optional) 
     * @return OK
     */
    detalleFacturaPOST(body: DetalleFactura | undefined): Promise<void>;

    /**
     * @return OK
     */
    detalleFacturaGET2(id: number): Promise<void>;

    /**
     * @param body (optional) 
     * @return OK
     */
    detalleFacturaPUT(id: number, body: DetalleFactura | undefined): Promise<void>;

    /**
     * @return OK
     */
    detalleFacturaDELETE(id: number): Promise<void>;

    /**
     * @return OK
     */
    detalleMovimientoGET(): Promise<void>;

    /**
     * @param body (optional) 
     * @return OK
     */
    detalleMovimientoPOST(body: DetalleMovimiento | undefined): Promise<void>;

    /**
     * @return OK
     */
    detalleMovimientoGET2(id: number): Promise<void>;

    /**
     * @param body (optional) 
     * @return OK
     */
    detalleMovimientoPUT(id: number, body: DetalleMovimiento | undefined): Promise<void>;

    /**
     * @return OK
     */
    detalleMovimientoDELETE(id: number): Promise<void>;

    /**
     * @return OK
     */
    facturaGET(): Promise<void>;

    /**
     * @param body (optional) 
     * @return OK
     */
    facturaPOST(body: FacturaRequest | undefined): Promise<void>;

    /**
     * @return OK
     */
    facturaGET2(id: number): Promise<void>;

    /**
     * @param body (optional) 
     * @return OK
     */
    facturaPUT(id: number, body: Factura | undefined): Promise<void>;

    /**
     * @return OK
     */
    facturaDELETE(id: number): Promise<void>;

    /**
     * @return OK
     */
    inventario(): Promise<void>;

    /**
     * @return OK
     */
    inventario2(productoId: number, almacenId: number): Promise<void>;

    /**
     * @param body (optional) 
     * @return OK
     */
    bulkProductos(body: BulkRegistroProductosRequest | undefined): Promise<void>;

    /**
     * @param body (optional) 
     * @return OK
     */
    movimientoInventarioPOST(body: MovimientoInventarioRequest | undefined): Promise<void>;

    /**
     * @return OK
     */
    movimientoInventarioGET(): Promise<void>;

    /**
     * @return OK
     */
    movimientoInventarioGET2(id: number): Promise<void>;

    /**
     * @param body (optional) 
     * @return OK
     */
    movimientoInventarioPUT(id: number, body: MovimientoInventario | undefined): Promise<void>;

    /**
     * @return OK
     */
    movimientoInventarioDELETE(id: number): Promise<void>;

    /**
     * @return OK
     */
    productoGET(): Promise<void>;

    /**
     * @param body (optional) 
     * @return OK
     */
    productoPOST(body: Producto | undefined): Promise<void>;

    /**
     * @return OK
     */
    productoGET2(id: number): Promise<void>;

    /**
     * @param body (optional) 
     * @return OK
     */
    productoPUT(id: number, body: Producto | undefined): Promise<void>;

    /**
     * @return OK
     */
    productoDELETE(id: number): Promise<void>;

    /**
     * @return OK
     */
    usuarios(): Promise<void>;

    /**
     * @param body (optional) 
     * @return OK
     */
    almacen(id: number, body: number | undefined): Promise<void>;
}

export class ApiClient implements IApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    protected transformOptions(options: RequestInit): Promise<RequestInit> {
        // Add any transformations to the options here if needed
        return Promise.resolve(options);
    }

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    almacenGET(): Promise<void> {
        let url_ = this.baseUrl + "/api/Almacen";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processAlmacenGET(_response);
        });
    }

    protected processAlmacenGET(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    almacenPOST(body: Almacen | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Almacen";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processAlmacenPOST(_response);
        });
    }

    protected processAlmacenPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    almacenGET2(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Almacen/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processAlmacenGET2(_response);
        });
    }

    protected processAlmacenGET2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    almacenPUT(id: number, body: Almacen | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Almacen/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processAlmacenPUT(_response);
        });
    }

    protected processAlmacenPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    almacenDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Almacen/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processAlmacenDELETE(_response);
        });
    }

    protected processAlmacenDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    predeterminar(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Almacen/{id}/predeterminar";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PATCH",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processPredeterminar(_response);
        });
    }

    protected processPredeterminar(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    register(body: RegisterRequest | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Auth/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    login(body: LoginRequest | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    clienteGET(): Promise<void> {
        let url_ = this.baseUrl + "/api/Cliente";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processClienteGET(_response);
        });
    }

    protected processClienteGET(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    clientePOST(body: Cliente | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Cliente";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processClientePOST(_response);
        });
    }

    protected processClientePOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    clienteGET2(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Cliente/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processClienteGET2(_response);
        });
    }

    protected processClienteGET2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    clientePUT(id: number, body: Cliente | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Cliente/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processClientePUT(_response);
        });
    }

    protected processClientePUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    clienteDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Cliente/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processClienteDELETE(_response);
        });
    }

    protected processClienteDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    detalleFacturaGET(): Promise<void> {
        let url_ = this.baseUrl + "/api/DetalleFactura";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processDetalleFacturaGET(_response);
        });
    }

    protected processDetalleFacturaGET(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    detalleFacturaPOST(body: DetalleFactura | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/DetalleFactura";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processDetalleFacturaPOST(_response);
        });
    }

    protected processDetalleFacturaPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    detalleFacturaGET2(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/DetalleFactura/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processDetalleFacturaGET2(_response);
        });
    }

    protected processDetalleFacturaGET2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    detalleFacturaPUT(id: number, body: DetalleFactura | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/DetalleFactura/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processDetalleFacturaPUT(_response);
        });
    }

    protected processDetalleFacturaPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    detalleFacturaDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/DetalleFactura/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processDetalleFacturaDELETE(_response);
        });
    }

    protected processDetalleFacturaDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    detalleMovimientoGET(): Promise<void> {
        let url_ = this.baseUrl + "/api/DetalleMovimiento";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processDetalleMovimientoGET(_response);
        });
    }

    protected processDetalleMovimientoGET(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    detalleMovimientoPOST(body: DetalleMovimiento | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/DetalleMovimiento";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processDetalleMovimientoPOST(_response);
        });
    }

    protected processDetalleMovimientoPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    detalleMovimientoGET2(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/DetalleMovimiento/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processDetalleMovimientoGET2(_response);
        });
    }

    protected processDetalleMovimientoGET2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    detalleMovimientoPUT(id: number, body: DetalleMovimiento | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/DetalleMovimiento/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processDetalleMovimientoPUT(_response);
        });
    }

    protected processDetalleMovimientoPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    detalleMovimientoDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/DetalleMovimiento/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processDetalleMovimientoDELETE(_response);
        });
    }

    protected processDetalleMovimientoDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    facturaGET(): Promise<void> {
        let url_ = this.baseUrl + "/api/Factura";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processFacturaGET(_response);
        });
    }

    protected processFacturaGET(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    facturaPOST(body: FacturaRequest | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Factura";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processFacturaPOST(_response);
        });
    }

    protected processFacturaPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    facturaGET2(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Factura/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processFacturaGET2(_response);
        });
    }

    protected processFacturaGET2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    facturaPUT(id: number, body: Factura | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Factura/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processFacturaPUT(_response);
        });
    }

    protected processFacturaPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    facturaDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Factura/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processFacturaDELETE(_response);
        });
    }

    protected processFacturaDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    inventario(): Promise<void> {
        let url_ = this.baseUrl + "/api/Inventario";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processInventario(_response);
        });
    }

    protected processInventario(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    inventario2(productoId: number, almacenId: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Inventario/{productoId}/{almacenId}";
        if (productoId === undefined || productoId === null)
            throw new Error("The parameter 'productoId' must be defined.");
        url_ = url_.replace("{productoId}", encodeURIComponent("" + productoId));
        if (almacenId === undefined || almacenId === null)
            throw new Error("The parameter 'almacenId' must be defined.");
        url_ = url_.replace("{almacenId}", encodeURIComponent("" + almacenId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processInventario2(_response);
        });
    }

    protected processInventario2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    bulkProductos(body: BulkRegistroProductosRequest | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Inventory/bulk-productos";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processBulkProductos(_response);
        });
    }

    protected processBulkProductos(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    movimientoInventarioPOST(body: MovimientoInventarioRequest | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/MovimientoInventario";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processMovimientoInventarioPOST(_response);
        });
    }

    protected processMovimientoInventarioPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    movimientoInventarioGET(): Promise<void> {
        let url_ = this.baseUrl + "/api/MovimientoInventario";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processMovimientoInventarioGET(_response);
        });
    }

    protected processMovimientoInventarioGET(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    movimientoInventarioGET2(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/MovimientoInventario/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processMovimientoInventarioGET2(_response);
        });
    }

    protected processMovimientoInventarioGET2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    movimientoInventarioPUT(id: number, body: MovimientoInventario | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/MovimientoInventario/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processMovimientoInventarioPUT(_response);
        });
    }

    protected processMovimientoInventarioPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    movimientoInventarioDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/MovimientoInventario/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processMovimientoInventarioDELETE(_response);
        });
    }

    protected processMovimientoInventarioDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    productoGET(): Promise<void> {
        let url_ = this.baseUrl + "/api/Producto";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processProductoGET(_response);
        });
    }

    protected processProductoGET(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    productoPOST(body: Producto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Producto";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processProductoPOST(_response);
        });
    }

    protected processProductoPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    productoGET2(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Producto/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processProductoGET2(_response);
        });
    }

    protected processProductoGET2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    productoPUT(id: number, body: Producto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Producto/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processProductoPUT(_response);
        });
    }

    protected processProductoPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    productoDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Producto/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processProductoDELETE(_response);
        });
    }

    protected processProductoDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    usuarios(): Promise<void> {
        let url_ = this.baseUrl + "/api/Usuarios";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processUsuarios(_response);
        });
    }

    protected processUsuarios(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    almacen(id: number, body: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Usuarios/{id}/almacen";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processAlmacen(_response);
        });
    }

    protected processAlmacen(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class Almacen implements IAlmacen {
    id?: number;
    nombre?: string | undefined;
    descripcion?: string | undefined;
    direccion?: string | undefined;
    activo?: boolean;
    fechaCreacion?: Date;
    fechaActualizacion?: Date | undefined;
    esPredeterminado?: boolean;
    ubicaciones?: Ubicacion[] | undefined;

    constructor(data?: IAlmacen) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nombre = _data["nombre"];
            this.descripcion = _data["descripcion"];
            this.direccion = _data["direccion"];
            this.activo = _data["activo"];
            this.fechaCreacion = _data["fechaCreacion"] ? new Date(_data["fechaCreacion"].toString()) : <any>undefined;
            this.fechaActualizacion = _data["fechaActualizacion"] ? new Date(_data["fechaActualizacion"].toString()) : <any>undefined;
            this.esPredeterminado = _data["esPredeterminado"];
            if (Array.isArray(_data["ubicaciones"])) {
                this.ubicaciones = [] as any;
                for (let item of _data["ubicaciones"])
                    this.ubicaciones!.push(Ubicacion.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Almacen {
        data = typeof data === 'object' ? data : {};
        let result = new Almacen();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nombre"] = this.nombre;
        data["descripcion"] = this.descripcion;
        data["direccion"] = this.direccion;
        data["activo"] = this.activo;
        data["fechaCreacion"] = this.fechaCreacion ? this.fechaCreacion.toISOString() : <any>undefined;
        data["fechaActualizacion"] = this.fechaActualizacion ? this.fechaActualizacion.toISOString() : <any>undefined;
        data["esPredeterminado"] = this.esPredeterminado;
        if (Array.isArray(this.ubicaciones)) {
            data["ubicaciones"] = [];
            for (let item of this.ubicaciones)
                data["ubicaciones"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IAlmacen {
    id?: number;
    nombre?: string | undefined;
    descripcion?: string | undefined;
    direccion?: string | undefined;
    activo?: boolean;
    fechaCreacion?: Date;
    fechaActualizacion?: Date | undefined;
    esPredeterminado?: boolean;
    ubicaciones?: Ubicacion[] | undefined;
}

export class BulkRegistroProductoDto implements IBulkRegistroProductoDto {
    nombre?: string | undefined;
    categoria?: string | undefined;
    unidadMedida?: string | undefined;
    precioUnitario?: number;
    cantidadInicial?: number;

    constructor(data?: IBulkRegistroProductoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nombre = _data["nombre"];
            this.categoria = _data["categoria"];
            this.unidadMedida = _data["unidadMedida"];
            this.precioUnitario = _data["precioUnitario"];
            this.cantidadInicial = _data["cantidadInicial"];
        }
    }

    static fromJS(data: any): BulkRegistroProductoDto {
        data = typeof data === 'object' ? data : {};
        let result = new BulkRegistroProductoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nombre"] = this.nombre;
        data["categoria"] = this.categoria;
        data["unidadMedida"] = this.unidadMedida;
        data["precioUnitario"] = this.precioUnitario;
        data["cantidadInicial"] = this.cantidadInicial;
        return data;
    }
}

export interface IBulkRegistroProductoDto {
    nombre?: string | undefined;
    categoria?: string | undefined;
    unidadMedida?: string | undefined;
    precioUnitario?: number;
    cantidadInicial?: number;
}

export class BulkRegistroProductosRequest implements IBulkRegistroProductosRequest {
    almacenDestinoId?: number;
    productos?: BulkRegistroProductoDto[] | undefined;

    constructor(data?: IBulkRegistroProductosRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.almacenDestinoId = _data["almacenDestinoId"];
            if (Array.isArray(_data["productos"])) {
                this.productos = [] as any;
                for (let item of _data["productos"])
                    this.productos!.push(BulkRegistroProductoDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BulkRegistroProductosRequest {
        data = typeof data === 'object' ? data : {};
        let result = new BulkRegistroProductosRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["almacenDestinoId"] = this.almacenDestinoId;
        if (Array.isArray(this.productos)) {
            data["productos"] = [];
            for (let item of this.productos)
                data["productos"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IBulkRegistroProductosRequest {
    almacenDestinoId?: number;
    productos?: BulkRegistroProductoDto[] | undefined;
}

export class Cliente implements ICliente {
    id?: number;
    nombre?: string | undefined;
    rnc?: string | undefined;
    direccion?: string | undefined;
    telefono?: string | undefined;
    correo?: string | undefined;
    facturas?: Factura[] | undefined;

    constructor(data?: ICliente) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nombre = _data["nombre"];
            this.rnc = _data["rnc"];
            this.direccion = _data["direccion"];
            this.telefono = _data["telefono"];
            this.correo = _data["correo"];
            if (Array.isArray(_data["facturas"])) {
                this.facturas = [] as any;
                for (let item of _data["facturas"])
                    this.facturas!.push(Factura.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Cliente {
        data = typeof data === 'object' ? data : {};
        let result = new Cliente();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nombre"] = this.nombre;
        data["rnc"] = this.rnc;
        data["direccion"] = this.direccion;
        data["telefono"] = this.telefono;
        data["correo"] = this.correo;
        if (Array.isArray(this.facturas)) {
            data["facturas"] = [];
            for (let item of this.facturas)
                data["facturas"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface ICliente {
    id?: number;
    nombre?: string | undefined;
    rnc?: string | undefined;
    direccion?: string | undefined;
    telefono?: string | undefined;
    correo?: string | undefined;
    facturas?: Factura[] | undefined;
}

export class DetalleFactura implements IDetalleFactura {
    id?: number;
    facturaId?: number;
    factura?: Factura;
    productoId?: number;
    cantidad?: number;
    precioUnitario?: number;
    readonly total?: number;

    constructor(data?: IDetalleFactura) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.facturaId = _data["facturaId"];
            this.factura = _data["factura"] ? Factura.fromJS(_data["factura"]) : <any>undefined;
            this.productoId = _data["productoId"];
            this.cantidad = _data["cantidad"];
            this.precioUnitario = _data["precioUnitario"];
            (<any>this).total = _data["total"];
        }
    }

    static fromJS(data: any): DetalleFactura {
        data = typeof data === 'object' ? data : {};
        let result = new DetalleFactura();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["facturaId"] = this.facturaId;
        data["factura"] = this.factura ? this.factura.toJSON() : <any>undefined;
        data["productoId"] = this.productoId;
        data["cantidad"] = this.cantidad;
        data["precioUnitario"] = this.precioUnitario;
        data["total"] = this.total;
        return data;
    }
}

export interface IDetalleFactura {
    id?: number;
    facturaId?: number;
    factura?: Factura;
    productoId?: number;
    cantidad?: number;
    precioUnitario?: number;
    total?: number;
}

export class DetalleFacturaRequest implements IDetalleFacturaRequest {
    productoId?: number;
    cantidad?: number;
    precioUnitario?: number;

    constructor(data?: IDetalleFacturaRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productoId = _data["productoId"];
            this.cantidad = _data["cantidad"];
            this.precioUnitario = _data["precioUnitario"];
        }
    }

    static fromJS(data: any): DetalleFacturaRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DetalleFacturaRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productoId"] = this.productoId;
        data["cantidad"] = this.cantidad;
        data["precioUnitario"] = this.precioUnitario;
        return data;
    }
}

export interface IDetalleFacturaRequest {
    productoId?: number;
    cantidad?: number;
    precioUnitario?: number;
}

export class DetalleMovimiento implements IDetalleMovimiento {
    id?: number;
    movimientoId?: number;
    movimiento?: MovimientoInventario;
    productoId?: number;
    producto?: Producto;
    cantidad?: number;

    constructor(data?: IDetalleMovimiento) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.movimientoId = _data["movimientoId"];
            this.movimiento = _data["movimiento"] ? MovimientoInventario.fromJS(_data["movimiento"]) : <any>undefined;
            this.productoId = _data["productoId"];
            this.producto = _data["producto"] ? Producto.fromJS(_data["producto"]) : <any>undefined;
            this.cantidad = _data["cantidad"];
        }
    }

    static fromJS(data: any): DetalleMovimiento {
        data = typeof data === 'object' ? data : {};
        let result = new DetalleMovimiento();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["movimientoId"] = this.movimientoId;
        data["movimiento"] = this.movimiento ? this.movimiento.toJSON() : <any>undefined;
        data["productoId"] = this.productoId;
        data["producto"] = this.producto ? this.producto.toJSON() : <any>undefined;
        data["cantidad"] = this.cantidad;
        return data;
    }
}

export interface IDetalleMovimiento {
    id?: number;
    movimientoId?: number;
    movimiento?: MovimientoInventario;
    productoId?: number;
    producto?: Producto;
    cantidad?: number;
}

export class DetalleMovimientoRequest implements IDetalleMovimientoRequest {
    productoId?: number;
    cantidad?: number;

    constructor(data?: IDetalleMovimientoRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productoId = _data["productoId"];
            this.cantidad = _data["cantidad"];
        }
    }

    static fromJS(data: any): DetalleMovimientoRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DetalleMovimientoRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productoId"] = this.productoId;
        data["cantidad"] = this.cantidad;
        return data;
    }
}

export interface IDetalleMovimientoRequest {
    productoId?: number;
    cantidad?: number;
}

export class Factura implements IFactura {
    id?: number;
    clienteId?: number;
    cliente?: Cliente;
    usuarioId?: number;
    fecha?: Date;
    fechaFactura?: Date;
    tipoComprobante?: string | undefined;
    ncf?: string | undefined;
    total?: number;
    estado?: string | undefined;
    detalles?: DetalleFactura[] | undefined;

    constructor(data?: IFactura) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.clienteId = _data["clienteId"];
            this.cliente = _data["cliente"] ? Cliente.fromJS(_data["cliente"]) : <any>undefined;
            this.usuarioId = _data["usuarioId"];
            this.fecha = _data["fecha"] ? new Date(_data["fecha"].toString()) : <any>undefined;
            this.fechaFactura = _data["fechaFactura"] ? new Date(_data["fechaFactura"].toString()) : <any>undefined;
            this.tipoComprobante = _data["tipoComprobante"];
            this.ncf = _data["ncf"];
            this.total = _data["total"];
            this.estado = _data["estado"];
            if (Array.isArray(_data["detalles"])) {
                this.detalles = [] as any;
                for (let item of _data["detalles"])
                    this.detalles!.push(DetalleFactura.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Factura {
        data = typeof data === 'object' ? data : {};
        let result = new Factura();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["clienteId"] = this.clienteId;
        data["cliente"] = this.cliente ? this.cliente.toJSON() : <any>undefined;
        data["usuarioId"] = this.usuarioId;
        data["fecha"] = this.fecha ? this.fecha.toISOString() : <any>undefined;
        data["fechaFactura"] = this.fechaFactura ? this.fechaFactura.toISOString() : <any>undefined;
        data["tipoComprobante"] = this.tipoComprobante;
        data["ncf"] = this.ncf;
        data["total"] = this.total;
        data["estado"] = this.estado;
        if (Array.isArray(this.detalles)) {
            data["detalles"] = [];
            for (let item of this.detalles)
                data["detalles"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IFactura {
    id?: number;
    clienteId?: number;
    cliente?: Cliente;
    usuarioId?: number;
    fecha?: Date;
    fechaFactura?: Date;
    tipoComprobante?: string | undefined;
    ncf?: string | undefined;
    total?: number;
    estado?: string | undefined;
    detalles?: DetalleFactura[] | undefined;
}

export class FacturaRequest implements IFacturaRequest {
    clienteId?: number;
    fechaFactura?: Date;
    detalles?: DetalleFacturaRequest[] | undefined;

    constructor(data?: IFacturaRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.clienteId = _data["clienteId"];
            this.fechaFactura = _data["fechaFactura"] ? new Date(_data["fechaFactura"].toString()) : <any>undefined;
            if (Array.isArray(_data["detalles"])) {
                this.detalles = [] as any;
                for (let item of _data["detalles"])
                    this.detalles!.push(DetalleFacturaRequest.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FacturaRequest {
        data = typeof data === 'object' ? data : {};
        let result = new FacturaRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clienteId"] = this.clienteId;
        data["fechaFactura"] = this.fechaFactura ? this.fechaFactura.toISOString() : <any>undefined;
        if (Array.isArray(this.detalles)) {
            data["detalles"] = [];
            for (let item of this.detalles)
                data["detalles"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IFacturaRequest {
    clienteId?: number;
    fechaFactura?: Date;
    detalles?: DetalleFacturaRequest[] | undefined;
}

export class Inventario implements IInventario {
    id?: number;
    productoId?: number;
    producto?: Producto;
    almacenId?: number;
    ubicacionId?: number | undefined;
    cantidad?: number;
    stockMinimo?: number;
    stockMaximo?: number | undefined;
    puntoReorden?: number | undefined;

    constructor(data?: IInventario) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.productoId = _data["productoId"];
            this.producto = _data["producto"] ? Producto.fromJS(_data["producto"]) : <any>undefined;
            this.almacenId = _data["almacenId"];
            this.ubicacionId = _data["ubicacionId"];
            this.cantidad = _data["cantidad"];
            this.stockMinimo = _data["stockMinimo"];
            this.stockMaximo = _data["stockMaximo"];
            this.puntoReorden = _data["puntoReorden"];
        }
    }

    static fromJS(data: any): Inventario {
        data = typeof data === 'object' ? data : {};
        let result = new Inventario();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productoId"] = this.productoId;
        data["producto"] = this.producto ? this.producto.toJSON() : <any>undefined;
        data["almacenId"] = this.almacenId;
        data["ubicacionId"] = this.ubicacionId;
        data["cantidad"] = this.cantidad;
        data["stockMinimo"] = this.stockMinimo;
        data["stockMaximo"] = this.stockMaximo;
        data["puntoReorden"] = this.puntoReorden;
        return data;
    }
}

export interface IInventario {
    id?: number;
    productoId?: number;
    producto?: Producto;
    almacenId?: number;
    ubicacionId?: number | undefined;
    cantidad?: number;
    stockMinimo?: number;
    stockMaximo?: number | undefined;
    puntoReorden?: number | undefined;
}

export class LoginRequest implements ILoginRequest {
    username?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILoginRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginRequest {
        data = typeof data === 'object' ? data : {};
        let result = new LoginRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginRequest {
    username?: string | undefined;
    password?: string | undefined;
}

export class MovimientoInventario implements IMovimientoInventario {
    id?: number;
    tipo?: string | undefined;
    almacenOrigenId?: number | undefined;
    almacenDestinoId?: number | undefined;
    fecha?: Date;
    comentario?: string | undefined;
    detalles?: DetalleMovimiento[] | undefined;

    constructor(data?: IMovimientoInventario) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.tipo = _data["tipo"];
            this.almacenOrigenId = _data["almacenOrigenId"];
            this.almacenDestinoId = _data["almacenDestinoId"];
            this.fecha = _data["fecha"] ? new Date(_data["fecha"].toString()) : <any>undefined;
            this.comentario = _data["comentario"];
            if (Array.isArray(_data["detalles"])) {
                this.detalles = [] as any;
                for (let item of _data["detalles"])
                    this.detalles!.push(DetalleMovimiento.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MovimientoInventario {
        data = typeof data === 'object' ? data : {};
        let result = new MovimientoInventario();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tipo"] = this.tipo;
        data["almacenOrigenId"] = this.almacenOrigenId;
        data["almacenDestinoId"] = this.almacenDestinoId;
        data["fecha"] = this.fecha ? this.fecha.toISOString() : <any>undefined;
        data["comentario"] = this.comentario;
        if (Array.isArray(this.detalles)) {
            data["detalles"] = [];
            for (let item of this.detalles)
                data["detalles"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IMovimientoInventario {
    id?: number;
    tipo?: string | undefined;
    almacenOrigenId?: number | undefined;
    almacenDestinoId?: number | undefined;
    fecha?: Date;
    comentario?: string | undefined;
    detalles?: DetalleMovimiento[] | undefined;
}

export class MovimientoInventarioRequest implements IMovimientoInventarioRequest {
    tipo?: string | undefined;
    almacenOrigenId?: number | undefined;
    almacenDestinoId?: number | undefined;
    comentario?: string | undefined;
    detalles?: DetalleMovimientoRequest[] | undefined;

    constructor(data?: IMovimientoInventarioRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tipo = _data["tipo"];
            this.almacenOrigenId = _data["almacenOrigenId"];
            this.almacenDestinoId = _data["almacenDestinoId"];
            this.comentario = _data["comentario"];
            if (Array.isArray(_data["detalles"])) {
                this.detalles = [] as any;
                for (let item of _data["detalles"])
                    this.detalles!.push(DetalleMovimientoRequest.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MovimientoInventarioRequest {
        data = typeof data === 'object' ? data : {};
        let result = new MovimientoInventarioRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tipo"] = this.tipo;
        data["almacenOrigenId"] = this.almacenOrigenId;
        data["almacenDestinoId"] = this.almacenDestinoId;
        data["comentario"] = this.comentario;
        if (Array.isArray(this.detalles)) {
            data["detalles"] = [];
            for (let item of this.detalles)
                data["detalles"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IMovimientoInventarioRequest {
    tipo?: string | undefined;
    almacenOrigenId?: number | undefined;
    almacenDestinoId?: number | undefined;
    comentario?: string | undefined;
    detalles?: DetalleMovimientoRequest[] | undefined;
}

export class Producto implements IProducto {
    id?: number;
    nombre?: string | undefined;
    codigoBarras?: string | undefined;
    categoria?: string | undefined;
    unidadMedida?: string | undefined;
    precioUnitario?: number;
    fechaCreacion?: Date;
    fechaActualizacion?: Date | undefined;
    inventarios?: Inventario[] | undefined;
    movimientos?: DetalleMovimiento[] | undefined;

    constructor(data?: IProducto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nombre = _data["nombre"];
            this.codigoBarras = _data["codigoBarras"];
            this.categoria = _data["categoria"];
            this.unidadMedida = _data["unidadMedida"];
            this.precioUnitario = _data["precioUnitario"];
            this.fechaCreacion = _data["fechaCreacion"] ? new Date(_data["fechaCreacion"].toString()) : <any>undefined;
            this.fechaActualizacion = _data["fechaActualizacion"] ? new Date(_data["fechaActualizacion"].toString()) : <any>undefined;
            if (Array.isArray(_data["inventarios"])) {
                this.inventarios = [] as any;
                for (let item of _data["inventarios"])
                    this.inventarios!.push(Inventario.fromJS(item));
            }
            if (Array.isArray(_data["movimientos"])) {
                this.movimientos = [] as any;
                for (let item of _data["movimientos"])
                    this.movimientos!.push(DetalleMovimiento.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Producto {
        data = typeof data === 'object' ? data : {};
        let result = new Producto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nombre"] = this.nombre;
        data["codigoBarras"] = this.codigoBarras;
        data["categoria"] = this.categoria;
        data["unidadMedida"] = this.unidadMedida;
        data["precioUnitario"] = this.precioUnitario;
        data["fechaCreacion"] = this.fechaCreacion ? this.fechaCreacion.toISOString() : <any>undefined;
        data["fechaActualizacion"] = this.fechaActualizacion ? this.fechaActualizacion.toISOString() : <any>undefined;
        if (Array.isArray(this.inventarios)) {
            data["inventarios"] = [];
            for (let item of this.inventarios)
                data["inventarios"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.movimientos)) {
            data["movimientos"] = [];
            for (let item of this.movimientos)
                data["movimientos"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IProducto {
    id?: number;
    nombre?: string | undefined;
    codigoBarras?: string | undefined;
    categoria?: string | undefined;
    unidadMedida?: string | undefined;
    precioUnitario?: number;
    fechaCreacion?: Date;
    fechaActualizacion?: Date | undefined;
    inventarios?: Inventario[] | undefined;
    movimientos?: DetalleMovimiento[] | undefined;
}

export class RegisterRequest implements IRegisterRequest {
    username?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;
    nombre?: string | undefined;
    role?: string | undefined;
    almacenId?: number | undefined;

    constructor(data?: IRegisterRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.email = _data["email"];
            this.password = _data["password"];
            this.nombre = _data["nombre"];
            this.role = _data["role"];
            this.almacenId = _data["almacenId"];
        }
    }

    static fromJS(data: any): RegisterRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["email"] = this.email;
        data["password"] = this.password;
        data["nombre"] = this.nombre;
        data["role"] = this.role;
        data["almacenId"] = this.almacenId;
        return data;
    }
}

export interface IRegisterRequest {
    username?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;
    nombre?: string | undefined;
    role?: string | undefined;
    almacenId?: number | undefined;
}

export class Ubicacion implements IUbicacion {
    id?: number;
    almacenId?: number;
    almacen?: Almacen;
    codigo?: string | undefined;
    descripcion?: string | undefined;

    constructor(data?: IUbicacion) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.almacenId = _data["almacenId"];
            this.almacen = _data["almacen"] ? Almacen.fromJS(_data["almacen"]) : <any>undefined;
            this.codigo = _data["codigo"];
            this.descripcion = _data["descripcion"];
        }
    }

    static fromJS(data: any): Ubicacion {
        data = typeof data === 'object' ? data : {};
        let result = new Ubicacion();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["almacenId"] = this.almacenId;
        data["almacen"] = this.almacen ? this.almacen.toJSON() : <any>undefined;
        data["codigo"] = this.codigo;
        data["descripcion"] = this.descripcion;
        return data;
    }
}

export interface IUbicacion {
    id?: number;
    almacenId?: number;
    almacen?: Almacen;
    codigo?: string | undefined;
    descripcion?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    throw new ApiException(message, status, response, headers, result);
}